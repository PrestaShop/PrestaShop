@reset-database-before-feature
Feature: SQL Manager
  PrestaShop allows BO users to manage SQL queries in the Configure > Advanced > Database page
  As a BO user
  I must be able to create, save, edit and run SQL queries

  Scenario: Get required database fields                            # Features/Scenario/Database/sql_manager.feature:7
    When I request the database fields from table carrier           # Tests\Integration\Behaviour\Features\Context\SqlManagerFeatureContext::getDatabaseTableFieldsList()
    Then I should get a set of database fields that contain values: # Tests\Integration\Behaviour\Features\Context\SqlManagerFeatureContext::assertSetOfDatabaseFieldsContain()
      | id_carrier      |
      | name            |
      | shipping_method |

  Scenario: Save a SQL request                                                         # Features/Scenario/Database/sql_manager.feature:14
    Given there is 0 stored SQL requests                                               # Tests\Integration\Behaviour\Features\Context\SqlManagerFeatureContext::resetStoredSqlRequest()
    When I add the SQL request "SELECT * FROM carrier" named "select_carriers_count_1" # Tests\Integration\Behaviour\Features\Context\SqlManagerFeatureContext::addSqlRequest()
    Then there should be 1 stored SQL request                                          # Tests\Integration\Behaviour\Features\Context\SqlManagerFeatureContext::assertStoredSqlRequestCount()

@reset-database-before-feature
Feature: Customer Management
  PrestaShop allows BO users to manage customers in the Customers > Customers page
  As a BO user
  I must be able to create, save and edit customers

  Scenario: Create a simple customer and edit it                                        # Features/Scenario/Customer/customer_management.feature:7
    When I create a customer "CUST-1" with following properties:                        # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::createACustomerUsingCommand()
      | firstName | Mathieu                    |
      | lastName  | Napoler                    |
      | email     | napoler.dev@prestashop.com |
      | password  | PrestaShopForever1_!       |
    Then if I query customer customer "CUST-1" I should get a Customer with properties: # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::assertQueryCustomerProperties()
      | firstName | Mathieu                    |
      | lastName  | Napoler                    |
      | email     | napoler.dev@prestashop.com |
    When I edit customer "CUST-1" and I change the following properties:                # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::editCustomerUsingCommand()
      | firstName | Jean |
    Then if I query customer customer "CUST-1" I should get a Customer with properties: # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::assertQueryCustomerProperties()
      | firstName | Jean |

  Scenario: Fail to create a duplicate customer                                                                   # Features/Scenario/Customer/customer_management.feature:22
    When I create a customer "CUST-2" with following properties:                                                  # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::createACustomerUsingCommand()
      | firstName | Mathieu                     |
      | lastName  | Napoler                     |
      | email     | naapoler.dev@prestashop.com |
      | password  | PrestaShopForever1_!        |
    And I attempt to create a customer "CUST-3" with following properties:                                        # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::attemptToCreateACustomerUsingCommand()
      | firstName | Mathieu                     |
      | lastName  | Napoler                     |
      | email     | naapoler.dev@prestashop.com |
      | password  | PrestaShopForever1_!        |
    Then I should be returned an error message 'Customer with email "naapoler.dev@prestashop.com" already exists' # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::assertGotErrorMessage()

  Scenario: Create a complete customer and edit it                                      # Features/Scenario/Customer/customer_management.feature:35
    When I create a customer "CUST-4" with following properties:                        # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::createACustomerUsingCommand()
      | firstName                 | Mathieu                   |
      | lastName                  | Polarn                    |
      | email                     | polarn.dev@prestashop.com |
      | password                  | PrestaShopForever1_!      |
      | defaultGroupId            | Guest                     |
      | groupIds                  | [Guest, Customer]         |
      | genderId                  | Mrs.                      |
      | isEnabled                 | false                     |
      | isPartnerOffersSubscribed | true                      |
      | birthday                  | 1987-02-22                |
    Then if I query customer customer "CUST-4" I should get a Customer with properties: # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::assertQueryCustomerProperties()
      | firstName               | Mathieu                   |
      | lastName                | Polarn                    |
      | email                   | polarn.dev@prestashop.com |
      | defaultGroupId          | Guest                     |
      | groupIds                | [Guest, Customer]         |
      | genderId                | Mrs.                      |
      | enabled                 | false                     |
      | partnerOffersSubscribed | true                      |
      | birthday                | 1987-02-22                |
    When I edit customer "CUST-4" and I change the following properties:                # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::editCustomerUsingCommand()
      | firstName                 | Jean       |
      | defaultGroupId            | Customer   |
      | isPartnerOffersSubscribed | false      |
      | birthday                  | 1987-02-24 |
    Then if I query customer customer "CUST-4" I should get a Customer with properties: # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::assertQueryCustomerProperties()
      | firstName            | Jean       |
      | defaultGroupId       | Customer   |
      | newsletterSubscribed | false      |
      | birthday             | 1987-02-24 |

  Scenario: Delete customer                                                                               # Features/Scenario/Customer/customer_management.feature:68
    When I create a customer "CUST-5" with following properties:                                          # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::createACustomerUsingCommand()
      | firstName      | Mathieu                   |
      | lastName       | Abigal                    |
      | email          | abigal.dev@prestashop.com |
      | password       | PrestaShopForever1_!      |
      | defaultGroupId | Guest                     |
      | groupIds       | [Guest]                   |
    And I delete customer "CUST-5" with method "allow_registration_after"                                 # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::deleteCustomer()
    Then if I query customer customer "CUST-5" I should get an error 'Customer with id "5" was not found' # Tests\Integration\Behaviour\Features\Context\CustomerManagerFeatureContext::assertQueryReturnsErrormessage()

@reset-database-before-feature
Feature: Setting private note about customer
  In order to have private notes about FO customers
  As a BO user
  I must be able to set private note about customer

  Scenario: Set private note about customer                                               # Features/Scenario/Customer/customer_private_note.feature:8
    Given there is customer "customer1" with email "pub@prestashop.com"                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::customerExists()
    And private note is not set about customer "customer1"                                # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::assertPrivateNoteIsNotSetAboutCustomer()
    When I set "Suspected card fraud by customer" private note about customer "customer1" # Tests\Integration\Behaviour\Features\Context\Domain\CustomerFeatureContext::setPrivateNoteAboutCustomer()
    Then customer "customer1" private note should be "Suspected card fraud by customer"   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::assertPrivateNoteAboutCustomer()

@reset-database-before-feature
Feature: Customer Required fields management
  PrestaShop allows BO users to manage required fields for FO customer profile
  As a BO user
  I must be able to configure required customer fields

  Scenario: Configure required fields for customer  # Features/Scenario/Customer/customer_required_fields_management.feature:8
    Given "Partner offers" is "not required"        # Tests\Integration\Behaviour\Features\Context\Domain\CustomerFeatureContext::validateRequiredFieldStatus()
    And I specify "Partner offers" to be "required" # Tests\Integration\Behaviour\Features\Context\Domain\CustomerFeatureContext::specifyRequiredField()
    When I save required fields for customer        # Tests\Integration\Behaviour\Features\Context\Domain\CustomerFeatureContext::saveSpecifiedRequiredFields()
    Then "Partner offers" should be "required"      # Tests\Integration\Behaviour\Features\Context\Domain\CustomerFeatureContext::validateRequiredFieldStatus()

@reset-database-before-feature
Feature: Category Management
  PrestaShop allows BO users to manage categories for products
  As a BO user
  I must be able to create, edit and delete categories in my shop

  Scenario: Adding new Category                                                               # Features/Scenario/Category/category_management.feature:8
    Given I specify "name" "PC parts" for new category "category1"                            # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyProperty()
    And I specify displayed to be "enabled" for new category "category1"                      # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyDisplayedProperty()
    And I specify "parent category" "Home Accessories" for new category "category1"           # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyProperty()
    And I specify "description" "Best PC parts" for new category "category1"                  # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyProperty()
    And I specify "meta title" "PC parts meta title" for new category "category1"             # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyProperty()
    And I specify "meta description" "PC parts meta description" for new category "category1" # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyProperty()
    And I specify "friendly url" "pc-parts" for new category "category1"                      # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyProperty()
    And I specify group access for "Customer,Guest,Visitor" for new category "category1"      # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::specifyGroupAccess()
    When I add new category "category1" with specified properties                             # Tests\Integration\Behaviour\Features\Context\Domain\CategoryFeatureContext::addCategoryWithSpecifiedProperties()
    Then category "category1" "name" should be "PC parts"                                     # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertProperty()
    And category "category1" should be "displayed"                                            # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertDisplayedProperty()
    And category "category1" parent category should be "Home Accessories"                     # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertParentCategory()
    And category "category1" "description" should be "Best PC parts"                          # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertProperty()
    And category "category1" "meta title" should be "PC parts meta title"                     # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertProperty()
    And category "category1" "meta description" should be "PC parts meta description"         # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertProperty()
    And category "category1" "friendly url" should be "pc-parts"                              # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertProperty()
    And category "category1" group access should be for "Customer,Guest,Visitor"              # Tests\Integration\Behaviour\Features\Context\CategoryFeatureContext::assertGroupAccess()

@reset-database-before-feature
Feature: Add cart rule in cart
  As a customer
  I must be able to correctly add cart rules in my cart

  Scenario: No product in cart should give a not valid cart rule insertion                                                                             # Features/Scenario/Cart/Adding/CartRule/add_cartrule.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then cart rule "cartrule1" cannot be applied to my cart                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCannotBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When at least one cart rule applies today for customer with id 0                                                                                   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::someCartRulesExistTodayForCustomerWithId()
    Then I should have 0 products in my cart                                                                                                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()

  Scenario: 1 product in cart, cart rule is inserted correctly                                                                                         # Features/Scenario/Cart/Adding/CartRule/add_cartrule.feature:17
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then I should have 1 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then cart rule "cartrule1" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When at least one cart rule applies today for customer with id 0                                                                                   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::someCartRulesExistTodayForCustomerWithId()
    Then I should have 1 products in my cart                                                                                                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()

  Scenario: 1 product in cart, cart rules are inserted correctly                                                                                       # Features/Scenario/Cart/Adding/CartRule/add_cartrule.feature:30
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then I should have 1 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then cart rule "cartrule1" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule "cartrule2" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When at least one cart rule applies today for customer with id 0                                                                                   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::someCartRulesExistTodayForCustomerWithId()
    Then I should have 1 products in my cart                                                                                                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()

  Scenario: 1 product in cart, double cart rule not inserted                                                                                           # Features/Scenario/Cart/Adding/CartRule/add_cartrule.feature:47
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then I should have 1 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then cart rule "cartrule1" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule "cartrule1" cannot be applied to my cart                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCannotBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When at least one cart rule applies today for customer with id 0                                                                                   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::someCartRulesExistTodayForCustomerWithId()
    Then I should have 1 products in my cart                                                                                                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()

  Scenario: 1 product in cart, cart rule giving gift, and global cart rule should be inserted without error                                             # Features/Scenario/Cart/Adding/CartRule/add_cartrule.feature:62
    Given I have an empty default cart                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule12" that applies a percent discount of 10.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule12" has a discount code "foo12"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule12" offers a gift product "product3"                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    When I add 1 items of product "product1" in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then I should have 1 different products in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then cart rule "cartrule12" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule12"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule "cartrule1" can be applied to my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When at least one cart rule applies today for customer with id 0                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::someCartRulesExistTodayForCustomerWithId()
    Then I should have 2 products in my cart                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()

  Scenario: 1 product in cart, cart rule giving gift out of stock, and global cart rule should be inserted without error (test PR #8361)                 # Features/Scenario/Cart/Adding/CartRule/add_cartrule.feature:81
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product4" is out of stock                                                                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsOutOfStock()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule13" that applies a percent discount of 10.0% with priority 13, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule13" has a discount code "foo13"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule13" offers a gift product "product4"                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    When I add 1 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then I should have 1 different products in my cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then cart rule "cartrule13" can be applied to my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule13"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule "cartrule1" can be applied to my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When at least one cart rule applies today for customer with id 0                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::someCartRulesExistTodayForCustomerWithId()
    Then I should have 1 products in my cart                                                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()

@reset-database-before-feature
Feature: Add product combination in cart
  As a customer
  I must be able to correctly add product combinations in my cart

  Scenario: Add combination in cart                                                                         # Features/Scenario/Cart/Adding/Product/add_combination.feature:6
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product7" with a price of 24.324 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product7" has a combination named "combi1" with 500 items in stock                       # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasACombinationWithNameAndQuantity()
    Then the remaining available stock for combination "combi1" of product "product7" should be 500         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCombinationNamedForProductNamedShouldBe()
    When I add 11 items of combination "combi1" of product "product7"                                       # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddCombinationNamedOfProductNamedInMyCartWithQuantity()
    Then I should have 11 items of combination "combi1" of product "product7" in my cart                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfCombinationNamedOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for combination "combi1" of product "product7" should be 489         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCombinationNamedForProductNamedShouldBe()

  Scenario: Cannot add combination in cart with quantity exceeding availability                             # Features/Scenario/Cart/Adding/Product/add_combination.feature:15
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product7" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product7" has a combination named "combi1" with 500 items in stock                       # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasACombinationWithNameAndQuantity()
    Then I am not able to add 600 items of combination "combi1" of product "product7" in my cart            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddPCombinationNamedOfroductNamedInMyCartWithQuantity()
    Then I should have 0 items of combination "combi1" of product "product7" in my cart                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfCombinationNamedOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for combination "combi1" of product "product7" should be 500         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCombinationNamedForProductNamedShouldBe()

  Scenario: Be able to add out of stock combination if configuration allows it                              # Features/Scenario/Cart/Adding/Product/add_combination.feature:23
    Given order out of stock products is allowed                                                            # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::allowOrderOutOfStock()
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product7" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product7" has a combination named "combi1" with 500 items in stock                       # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasACombinationWithNameAndQuantity()
    When I add 600 items of combination "combi1" of product "product7"                                      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddCombinationNamedOfProductNamedInMyCartWithQuantity()
    Then I should have 600 items of combination "combi1" of product "product7" in my cart                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfCombinationNamedOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for combination "combi1" of product "product7" should be -100        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCombinationNamedForProductNamedShouldBe()

@reset-database-before-feature
Feature: Add product customization in cart
  As a customer
  I must be able to correctly add product customizations in my cart

  Scenario: Add customization in cart                                                                     # Features/Scenario/Cart/Adding/Product/add_customization.feature:6
    Given I have an empty default cart                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product8" with a price of 26.364 and 30 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product8" has a customization field named "custo1"                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasACustomizationWithName()
    When I add 11 items of customization "custo1" of product "product8"                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddCustomizationNamedOfProductNamedInMyCartWithQuantity()
    Then I should have 11 items of customization "custo1" of product "product8" in my cart                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfCustomizationNamedOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for customization "custo1" of product "product8" should be 19      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCustomizationNamedForProductNamedShouldBe()

  Scenario: Cannot add customization in cart with quantity exceeding availability                         # Features/Scenario/Cart/Adding/Product/add_customization.feature:14
    Given I have an empty default cart                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product8" with a price of 26.364 and 30 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product8" has a customization field named "custo1"                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasACustomizationWithName()
    Then I am not able to add 41 items of customization "custo1" of product "product8" to my cart         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddPCustomizationNamedOfroductNamedInMyCartWithQuantity()
    Then I should have 0 items of customization "custo1" of product "product8" in my cart                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfCustomizationNamedOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for customization "custo1" of product "product8" should be 30      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCustomizationNamedForProductNamedShouldBe()

  Scenario: Be able to add out of stock customization if configuration allows it                          # Features/Scenario/Cart/Adding/Product/add_customization.feature:22
    Given order out of stock products is allowed                                                          # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::allowOrderOutOfStock()
    Given I have an empty default cart                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product8" with a price of 26.364 and 30 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product8" has a customization field named "custo1"                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasACustomizationWithName()
    When I add 41 items of customization "custo1" of product "product8"                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddCustomizationNamedOfProductNamedInMyCartWithQuantity()
    Then I should have 41 items of customization "custo1" of product "product8" in my cart                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfCustomizationNamedOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for customization "custo1" of product "product8" should be -11     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfCustomizationNamedForProductNamedShouldBe()

@reset-database-before-feature
Feature: Add product pack in cart
  As a customer
  I must be able to correctly add product packs in my cart

  Scenario: Check remaining quantity of pack when config is set to STOCK_TYPE_PACK_ONLY                  # Features/Scenario/Cart/Adding/Product/add_pack.feature:6
    Given specific shop configuration for "pack stock type" is set to decrement packs only               # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then the remaining available stock for product "product6" should be 10                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    Then the remaining available stock for product "product5" should be 50                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Check remaining quantity of pack when config is set to STOCK_TYPE_PRODUCTS_ONLY              # Features/Scenario/Cart/Adding/Product/add_pack.feature:14
    Given specific shop configuration for "pack stock type" is set to decrement products only            # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then the remaining available stock for product "product6" should be 5                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    Then the remaining available stock for product "product5" should be 50                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Check remaining quantity of pack when config is set to STOCK_TYPE_PACK_BOTH                  # Features/Scenario/Cart/Adding/Product/add_pack.feature:22
    Given specific shop configuration for "pack stock type" is set to decrement both packs and products  # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then the remaining available stock for product "product6" should be 5                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    Then the remaining available stock for product "product5" should be 50                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Check pack if is in stock when config is set to STOCK_TYPE_PACK_ONLY                         # Features/Scenario/Cart/Adding/Product/add_pack.feature:30
    Given specific shop configuration for "pack stock type" is set to decrement packs only               # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then pack "product6" has enough stock for an order of 10 items                                       # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::packWithNameIsInStockForQuantity()
    Then pack "product6" has not enough stock for an order of 11 items                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::packWithNameIsInStockForQuantity()

  Scenario: Check pack if is in stock when config is set to STOCK_TYPE_PRODUCTS_ONLY                     # Features/Scenario/Cart/Adding/Product/add_pack.feature:38
    Given specific shop configuration for "pack stock type" is set to decrement products only            # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then pack "product6" has enough stock for an order of 5 items                                        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::packWithNameIsInStockForQuantity()
    Then pack "product6" has not enough stock for an order of 6 items                                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::packWithNameIsInStockForQuantity()

  Scenario: Check pack if is in stock when config is set to STOCK_TYPE_PACK_BOTH                         # Features/Scenario/Cart/Adding/Product/add_pack.feature:46
    Given specific shop configuration for "pack stock type" is set to decrement both packs and products  # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then pack "product6" has enough stock for an order of 5 items                                        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::packWithNameIsInStockForQuantity()
    Then pack "product6" has not enough stock for an order of 6 items                                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::packWithNameIsInStockForQuantity()

  Scenario: Check product is correctly considered as a pack                                              # Features/Scenario/Cart/Adding/Product/add_pack.feature:54
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    Then product "product6" is considered as a pack                                                      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productIsConsideredAsAPack()

  Scenario: Check pack/product count is correct when adding in pack if configuration is set to STOCK_TYPE_PACK_ONLY # Features/Scenario/Cart/Adding/Product/add_pack.feature:60
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "pack stock type" is set to decrement packs only                          # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    When I add 2 items of product "product6" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 30 items of product "product5" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart should contain 2 units of product "product6", including items in pack                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 30 units of product "product5", including items in pack                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 2 units of product "product6", excluding items in pack                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 30 units of product "product5", excluding items in pack                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then I should have 2 different products in my cart                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then the remaining available stock for product "product6" should be 8                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    Then the remaining available stock for product "product5" should be 20                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Check pack/product count is correct when adding in pack if configuration is set to STOCK_TYPE_PRODUCTS_ONLY # Features/Scenario/Cart/Adding/Product/add_pack.feature:76
    Given I have an empty default cart                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "pack stock type" is set to decrement products only                           # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                                        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    When I add 2 items of product "product6" in my cart                                                                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 30 items of product "product5" in my cart                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart should contain 2 units of product "product6", excluding items in pack                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 30 units of product "product5", excluding items in pack                                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 2 units of product "product6", including items in pack                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 50 units of product "product5", including items in pack                                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then I should have 2 different products in my cart                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then the remaining available stock for product "product6" should be 0                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    Then the remaining available stock for product "product5" should be 0                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Check pack/product count is correct when adding in pack if configuration is set to STOCK_TYPE_PACK_BOTH # Features/Scenario/Cart/Adding/Product/add_pack.feature:92
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "pack stock type" is set to decrement both packs and products             # Tests\Integration\Behaviour\Features\Context\Configuration\PackConfigurationFeatureContext::specificShopConfigurationPackStockTypeOfIsSetTo()
    Given there is a product in the catalog named "product5" with a price of 23.86 and 50 items in stock            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product6" with a price of 12.34 and 10 items in stock            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product6" is a pack containing 10 items of product "product5"                                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsAPackContainingQuantityOfProductNamed()
    When I add 2 items of product "product6" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 30 items of product "product5" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart should contain 2 units of product "product6", excluding items in pack                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 30 units of product "product5", excluding items in pack                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 2 units of product "product6", including items in pack                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then my cart should contain 50 units of product "product5", including items in pack                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then I should have 2 different products in my cart                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then the remaining available stock for product "product6" should be 0                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    Then the remaining available stock for product "product5" should be 0                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

@reset-database-before-feature
Feature: Add product in cart
  As a customer
  I must be able to correctly add products in my cart

  Scenario: Add product(s) in cart                                                                          # Features/Scenario/Cart/Adding/Product/add_standard_product.feature:6
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Then the remaining available stock for product "product1" should be 1000                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()
    When I add 11 items of product "product1" in my cart                                                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart should contain 11 units of product "product1", excluding items in pack                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for product "product1" should be 989                                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Cannot add product in cart with quantity exceeding availability                                 # Features/Scenario/Cart/Adding/Product/add_standard_product.feature:14
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Then I am not allowed to add 1100 items of product "product1" in my cart                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddProductNamedInMyCartWithQuantity()
    Then my cart should contain 0 units of product "product1", excluding items in pack                      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for product "product1" should be 1000                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: Be able to add out of stock product if configuration allows it                                  # Features/Scenario/Cart/Adding/Product/add_standard_product.feature:21
    Given order out of stock products is allowed                                                            # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::allowOrderOutOfStock()
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1100 items of product "product1" in my cart                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart should contain 1100 units of product "product1", excluding items in pack                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    Then the remaining available stock for product "product1" should be -100                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::remainingQuantityOfProductNamedShouldBe()

  Scenario: change product quantity                                                                                      # Features/Scenario/Cart/Adding/Product/add_standard_product.feature:29
    Given I have an empty default cart                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I change quantity of product "product1" in my cart with quantity 1 and operator up, result of change is OK      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 1 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 1 and operator up, result of change is OK      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 2 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 2 and operator up, result of change is OK      # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 4 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 2 and operator nothing, result of change is KO # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 4 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 2 and operator down, result of change is OK    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 2 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 1 and operator down, result of change is OK    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 1 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 1 and operator down, result of change is OK    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 0 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 1 and operator down, result of change is OK    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 0 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()
    When I change quantity of product "product1" in my cart with quantity 1 and operator nothing, result of change is OK # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iChangeProductQuantityInMyCart()
    Then my cart should contain 0 units of product "product1", excluding items in pack                                   # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::quantityOfProductNamedInMyCartShouldBe()

@reset-database-before-feature
Feature: Cart calculation with carriers
  As a customer
  I must be able to have correct cart total when selecting carriers

  Scenario: Empty cart, carrier 1                                                                       # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:6
    Given I have an empty default cart                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a zone named "zone1"                                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                           # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                           # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I select address "address1" in my cart                                                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 0.0                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 0.0 tax included                                                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, carrier 1                                                      # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 5.1                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 24.912 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 24.912 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, carrier 1                                                      # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:52
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 5.1                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 64.536 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 64.536 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, carrier 1                                               # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:76
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 5.1                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 160.5 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 160.5 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Empty cart, carrier 2                                                                           # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:104
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 0.0                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 0.0 tax included                                                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, carrier 2                                                      # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:127
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.7                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 27.512 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 27.512 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, carrier 2                                                      # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:151
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.7                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 67.136 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 67.136 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, carrier 2                                               # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:175
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.7                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 163.1 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 163.1 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: free carrier in price range                                                                    # Features/Scenario/Cart/Calculation/Carrier/carrier.feature:203
    Given I have an empty default cart                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 151.0 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 150      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 0.0 in zone "zone1" for price between 150 and 1000   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I add 1 item of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 2.0                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 153.0 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 153.0 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with carrier specific cart rules
  As a customer
  I must be able to have correct cart total when selecting carriers

  Scenario: Empty cart, carrier 1                                                                                                                      # Features/Scenario/Cart/Calculation/Carrier/cart_rule_carrier_specific.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 0.0                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 0.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, carrier 1                                                                                                 # Features/Scenario/Cart/Calculation/Carrier/cart_rule_carrier_specific.feature:30
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 5.1                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 24.912 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 24.912 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Empty cart, carrier 2                                                                                                                      # Features/Scenario/Cart/Calculation/Carrier/cart_rule_carrier_specific.feature:56
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 0.0                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 0.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, carrier 2                                                                                                 # Features/Scenario/Cart/Calculation/Carrier/cart_rule_carrier_specific.feature:81
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 55.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.7                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 16.6154 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 16.6154 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with carriers specific cart rules: carrier changes
  As a customer
  I must be able to have correct cart total when selecting carriers

  Scenario: one product in cart, quantity 1, cant apply not corresponding cart rule                                                                    # Features/Scenario/Cart/Calculation/Carrier/change_carrier_cart_rule.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier3"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier3" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier3" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "bar"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" is restricted to carrier "carrier1"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 55.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" is restricted to carrier "carrier3"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule "cartrule2" cannot be applied to my cart                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCannotBeAppliedToMyCart()

  Scenario: one product in cart, quantity 1, can apply corresponding cart rule                                                                         # Features/Scenario/Cart/Calculation/Carrier/change_carrier_cart_rule.feature:39
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier3"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier3" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier3" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "bar"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" is restricted to carrier "carrier1"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 55.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" is restricted to carrier "carrier3"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule "cartrule1" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule count in my cart should be 1                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()
    Then cart rule "cartrule1" cannot be applied to my cart                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCannotBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule count in my cart should be 1                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()

  Scenario: one product in cart, quantity 1, can apply corresponding cart rule                                                                         # Features/Scenario/Cart/Calculation/Carrier/change_carrier_cart_rule.feature:77
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier3"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier3" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier3" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "bar"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" is restricted to carrier "carrier1"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 55.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" is restricted to carrier "carrier3"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule "cartrule1" can be applied to my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart rule count in my cart should be 1                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()
    Then cart rule "cartrule1" cannot be applied to my cart                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCannotBeAppliedToMyCart()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule count in my cart should be 0                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()

  Scenario: one product in cart, quantity 1, cart rule without code correctly (un)applied on corresponding carrier                                     # Features/Scenario/Cart/Calculation/Carrier/change_carrier_cart_rule.feature:116
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a zone named "zone2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a country named "country2" and iso code "US" in zone "zone2"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is a state named "state2" with iso code "TEST-2" in country"country2" and zone "zone2"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is an address named "address2" with postcode "1" in state "state2"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 3.1 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 4.3 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier2"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier2" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier2" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a carrier named "carrier3"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier3" applies shipping fees of 5.7 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier3" applies shipping fees of 6.2 in zone "zone2" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule1" is restricted to carrier "carrier2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "bar"                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" is restricted to carrier "carrier1"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 55.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" is restricted to carrier "carrier3"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToCarrierNamed()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule count in my cart should be 0                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()
    When I select carrier "carrier3" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule count in my cart should be 1                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()
    When I select carrier "carrier2" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule count in my cart should be 0                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleInCartCount()

@reset-database-before-feature
Feature: Cart rule (amount) calculation with one cart rule
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, one cartRule                                                                                                                 # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:6
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 5€ global cartRule                                                                                  # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:16
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 21.812 tax included                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 21.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 500€ global cartRule                                                                                  # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:27
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule5" that applies an amount discount of 500.0 with priority 5, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule5" has a discount code "foo5"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule5"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 7.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 7.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one 5€ global cartRule                                                                                  # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:38
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 61.436 tax included                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 61.436 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one 5€ global cartRule (reduced product at first place)                                          # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:49
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 157.4 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 157.4 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one 5€ global cartRule (reduced product at second place)                                         # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:64
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 157.4 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 157.4 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one 500€ global cartRule                                                                           # Features/Scenario/Cart/Calculation/CartRule/amount_mono.feature:79
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule5" that applies an amount discount of 500.0 with priority 5, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule5" has a discount code "foo5"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule5"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 7.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 7.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (amount) calculation with one cart rule
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: 4 products in cart, one is virtual, several quantities, one 5€ global voucher                                                            # Features/Scenario/Cart/Calculation/CartRule/amount_mono_virtual.feature:6
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product8" with a price of 12.345 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product8" is virtual                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameProductisVirtual()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product8" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then cart rule "cartrule4" can be applied to my cart                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 182.09 tax included                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 182.09 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Only virtual product in my cart, one 5€ global voucher                                                                                   # Features/Scenario/Cart/Calculation/CartRule/amount_mono_virtual.feature:25
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product8" with a price of 12.345 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product8" is virtual                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameProductisVirtual()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product8" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then cart rule "cartrule4" can be applied to my cart                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 19.69 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.69 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (amount) calculation with multiple cart rules
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, 2 cartRules                                                                                                                   # Features/Scenario/Cart/Calculation/CartRule/amount_multiple.feature:6
    Given I have an empty default cart                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                            # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule6" that applies an amount discount of 10.0 with priority 6, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule6" has a discount code "foo6"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule4"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule6"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 5€ global cartRule, one 10€ global cartRule                                                          # Features/Scenario/Cart/Calculation/CartRule/amount_multiple.feature:19
    Given I have an empty default cart                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                            # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule6" that applies an amount discount of 10.0 with priority 6, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule6" has a discount code "foo6"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule6"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 11.812 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 11.812 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one 5€ global cartRule, one 10€ global cartRule                                                          # Features/Scenario/Cart/Calculation/CartRule/amount_multiple.feature:33
    Given I have an empty default cart                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                            # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule6" that applies an amount discount of 10.0 with priority 6, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule6" has a discount code "foo6"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule6"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 51.436 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 51.436 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one 5€ global cartRule (reduced product at first place)                                           # Features/Scenario/Cart/Calculation/CartRule/amount_multiple.feature:47
    Given I have an empty default cart                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                            # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule6" that applies an amount discount of 10.0 with priority 6, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule6" has a discount code "foo6"                                                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule6"                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 147.4 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 147.4 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (amount) calculation with one cart rule restricted to one product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, one cartRule                                                                                                                 # Features/Scenario/Cart/Calculation/CartRule/amount_specific.feature:6
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule8"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one specific 5€ cartRule on product2                                                                    # Features/Scenario/Cart/Calculation/CartRule/amount_specific.feature:18
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule8"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 26.812 tax included                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one specific 5€ cartRule on product #2                                                                  # Features/Scenario/Cart/Calculation/CartRule/amount_specific.feature:31
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule8"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 66.436 tax included                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one specific 5€ cartRule on product #2                                                           # Features/Scenario/Cart/Calculation/CartRule/amount_specific.feature:44
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule8"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 157.4 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 157.4 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one specific 500€ cartRule on product #2                                                           # Features/Scenario/Cart/Calculation/CartRule/amount_specific.feature:60
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule9" that applies an amount discount of 500.0 with priority 8, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule9" is restricted to product "product2"                                                                                    # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule9" has a discount code "foo9"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule9"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 97.624 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart calculation with cart rules giving gift
  As a customer
  I must be able to have correct cart total when adding products, and adding cart rule with gift

  Scenario: free carrier in price range, voucher in percent set the price bellow range                                                                 # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:7
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 151.0 and 1000 items in stock                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 150                                                  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 0.0 in zone "zone1" for price between 150 and 1000                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 item of product "product1" in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.0                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 82.5 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 82.5 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: free carrier in price range, voucher in amount set the price bellow range                                                                # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:27
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 151.0 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 150                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 0.0 in zone "zone1" for price between 150 and 1000                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies an amount discount of 2.0 with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 item of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.0                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 156.0 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 156.0 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: carrier fees not free, voucher without code set shipping fees free above amount, cart total is below                                     # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:48
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 149.0 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies an amount discount of 0.0 with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" offers free shipping                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule2" applies discount only when cart total is above 150.0                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleAppliesBetween()
    When I add 1 item of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.0                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 156.0 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 156.0 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: carrier fees not free, voucher with code set shipping fees free above amount, cart total is below                                        # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:67
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 149.0 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 150                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 0.0 in zone "zone1" for price between 150 and 1000                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies an amount discount of 0.0 with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" offers free shipping                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule2" applies discount only when cart total is above 150.0                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleAppliesBetween()
    When I add 1 item of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule "cartrule2" cannot be applied to my cart                                                                                          # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCannotBeAppliedToMyCart()
    Then cart shipping fees should be 7.0                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 156.0 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 156.0 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: carrier fees not free, voucher without code set shipping fees free above amount, cart total is below                                     # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:89
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 149.0 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies an amount discount of 0.0 with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" offers free shipping                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule2" applies discount only when cart total is above 150.0                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleAppliesBetween()
    When I add 1 item of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 7.0                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 156.0 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 156.0 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: carrier fees not free, voucher with code set shipping fees free above amount, cart total is above                                        # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:108
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 151.0 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 150                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 0.0 in zone "zone1" for price between 150 and 1000                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies an amount discount of 0.0 with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" offers free shipping                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule2" applies discount only when cart total is above 150.0                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleAppliesBetween()
    When I add 1 item of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart rule "cartrule2" can be applied to my cart                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedCanBeAppliedToMyCart()
    When I use the discount "cartrule2"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then cart shipping fees should be 2.0                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 151.0 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 151.0 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: carrier fees not free, voucher without code set shipping fees free above amount, cart total is above                                     # Features/Scenario/Cart/Calculation/CartRule/carrier.feature:131
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 151.0 and 1000 items in stock                                           # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                               # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a carrier named "carrier1"                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 150                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given carrier "carrier1" applies shipping fees of 0.0 in zone "zone1" for price between 150 and 1000                                             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    Given there is a cart rule named "cartrule2" that applies an amount discount of 0.0 with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule2" offers free shipping                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule2" applies discount only when cart total is above 150.0                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleAppliesBetween()
    When I add 1 item of product "product1" in my cart                                                                                               # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                      # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    Then cart shipping fees should be 2.0                                                                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::calculateCartShippingFees()
    Then my cart total should be 151.0 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 151.0 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with one cart rule restricted to cheapest product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, one 50% cartRule on cheapest product                                                                                             # Features/Scenario/Cart/Calculation/CartRule/cheapest_product.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to cheapest product                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleIsRestrictedToCheapestProduct()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 50% cartRule on cheapest product                                                                        # Features/Scenario/Cart/Calculation/CartRule/cheapest_product.feature:18
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to cheapest product                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleIsRestrictedToCheapestProduct()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 16.906 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 16.906 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: multiple products in cart, several quantities, one 50% cartRule on cheapest product                                                          # Features/Scenario/Cart/Calculation/CartRule/cheapest_product.feature:30
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to cheapest product                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleIsRestrictedToCheapestProduct()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 152.494 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 152.494 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: multiple products in cart, several quantities, one 50% cartRule on cheapest product excluding already discounted                             # Features/Scenario/Cart/Calculation/CartRule/cheapest_product.feature:46
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to cheapest product                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleIsRestrictedToCheapestProduct()
    Given cart rule "cartrule10" does not apply to already discounted products                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleDoesNotApplyToDiscountedProduct()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 152.494 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 152.494 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: multiple products in cart, several quantities, one 50% cartRule on cheapest product excluding already discounted, cheapest product is already discounted # Features/Scenario/Cart/Calculation/CartRule/cheapest_product.feature:63
    Given I have an empty default cart                                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product1" has a specific price named "specificPrice1" with an amount discount of 3.0                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasASpecificPriceWithAmountDiscount()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to cheapest product                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleIsRestrictedToCheapestProduct()
    Given cart rule "cartrule10" does not apply to already discounted products                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleDoesNotApplyToDiscountedProduct()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                                         # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 137.806 tax included                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 137.806 tax included                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with one cart rule restricted to not already discounted product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: multiple products in cart, several quantities, one 50% cartRule on cheapest product excluding already discounted, cheapest product is already discounted # Features/Scenario/Cart/Calculation/CartRule/exclude_discounted_product.feature:6
    Given I have an empty default cart                                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product1" has a specific price named "specificPrice1" with an amount discount of 3.0                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasASpecificPriceWithAmountDiscount()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" does not apply to already discounted products                                                                                       # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleDoesNotApplyToDiscountedProduct()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                                         # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 105.418 tax included                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 105.418 tax included                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (amount) calculation with one cart rule offering free shipping
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: One product in cart, one cartRule offering only free shipping                                                              # Features/Scenario/Cart/Calculation/CartRule/free_shipping.feature:6
    Given I have an empty default cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies no discount with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndNoDiscountAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" offers free shipping                                                                                   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 19.812 tax included                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax included                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: One product in cart, one cartRule offering free shipping AND 5€ discount                                                                 # Features/Scenario/Cart/Calculation/CartRule/free_shipping.feature:18
    Given I have an empty default cart                                                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                           # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" offers free shipping                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleOffersFreeShipping()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                           # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                              # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 14.812 tax included                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 14.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with cart rules giving gift
  As a customer
  I must be able to have correct cart total when adding products, and adding cart rule with gift

  Scenario: 1 product in cart (out of stock), 1 cart rule give it as a gift, offering a gift (out of stock) and a global 10% discount                    # Features/Scenario/Cart/Calculation/CartRule/gift.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product4" is out of stock                                                                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsOutOfStock()
    Given there is a cart rule named "cartrule13" that applies a percent discount of 10.0% with priority 13, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule13" has a discount code "foo13"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule13" offers a gift product "product4"                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    When I am not allowed to add 1 items of product "product4" in my cart                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule13"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then I should have 0 products in my cart                                                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 2 products in cart, one cart rule offering a gift (out of stock) and a global 10% discount                                                   # Features/Scenario/Cart/Calculation/CartRule/gift.feature:20
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product4" is out of stock                                                                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsOutOfStock()
    Given there is a cart rule named "cartrule13" that applies a percent discount of 10.0% with priority 13, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule13" has a discount code "foo13"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule13" offers a gift product "product4"                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I am not allowed to add 1 items of product "product4" in my cart                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule13"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then I should have 3 products in my cart                                                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()
    Then my cart total should be 60.4924 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: 2 products in cart, one cart rule offering a gift (in stock) and a global 10% discount                                                       # Features/Scenario/Cart/Calculation/CartRule/gift.feature:35
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product4" is out of stock                                                                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsOutOfStock()
    Given there is a cart rule named "cartrule12" that applies a percent discount of 10.0% with priority 12, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule12" has a discount code "foo12"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule12" offers a gift product "product3"                                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    When I add 2 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I am not allowed to add 1 items of product "product4" in my cart                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule12"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then I should have 6 products in my cart                                                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalProductCountInMyCartShouldBe()
    Then my cart total should be 126.8692 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 126.8692 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (mixed) calculation with multiple cart rules
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, 2 mixed cartRule                                                                                                               # Features/Scenario/Cart/Calculation/CartRule/mixed.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule4"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 50% global cartRule, one 5€ global cartRule                                                           # Features/Scenario/Cart/Calculation/CartRule/mixed.feature:19
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule4"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 11.906 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 11.906 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 50% global cartRule, one 500€ global cartRule                                                         # Features/Scenario/Cart/Calculation/CartRule/mixed.feature:33
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule5" that applies an amount discount of 500.0 with priority 5, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule5" has a discount code "foo5"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule5"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 7.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 7.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one 5€ global cartRule, one 50% global cartRule                                                           # Features/Scenario/Cart/Calculation/CartRule/mixed.feature:47
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule7" that applies a percent discount of 50.0% with priority 7, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule7" has a discount code "foo7"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule7"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 34.218 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: one product in cart, quantity 3, one 500€ global cartRule, one 50% global cartRule                                                         # Features/Scenario/Cart/Calculation/CartRule/mixed.feature:62
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule5" that applies an amount discount of 500.0 with priority 5, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule5" has a discount code "foo5"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule7" that applies a percent discount of 50.0% with priority 7, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule7" has a discount code "foo7"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule5"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule7"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 7.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 7.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products with several quantities in cart, one 5€ global cartRule, one 50% global cartRule                                                # Features/Scenario/Cart/Calculation/CartRule/mixed.feature:76
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule4" that applies an amount discount of 5.0 with priority 4, quantity of 1000 and quantity per user 1000   # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule4" has a discount code "foo4"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule7" that applies a percent discount of 50.0% with priority 7, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule7" has a discount code "foo7"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule4"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule7"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 82.205 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with multiple cart rules restricted to one product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, 2 cartRules                                                                                                                      # Features/Scenario/Cart/Calculation/CartRule/mixed_specific.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                      # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule8"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, specific 5€ cartRule on product #2, specific 50% cartRule on product #2                                     # Features/Scenario/Cart/Calculation/CartRule/mixed_specific.feature:22
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                      # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule8"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 26.812 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, specific 5€ cartRule on product #2, specific 50% cartRule on product #2                                     # Features/Scenario/Cart/Calculation/CartRule/mixed_specific.feature:39
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                      # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule8"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 66.436 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product #2 in cart, quantity 3, specific 5€ cartRule on product #2, specific 50% cartRule on product #2                                  # Features/Scenario/Cart/Calculation/CartRule/mixed_specific.feature:56
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                      # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule8"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 53.082 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: 3 products in cart, several quantities, specific 5€ cartRule on product #2, specific 50% cartRule on product #2                              # Features/Scenario/Cart/Calculation/CartRule/mixed_specific.feature:73
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                      # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule8"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 127.512 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: 2 products in cart, one is out of stock, specific 5€ cartRule on product #2, specific 50% cartRule on product #2                             # Features/Scenario/Cart/Calculation/CartRule/mixed_specific.feature:94
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product4" is out of stock                                                                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameIsOutOfStock()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule8" that applies an amount discount of 5.0 with priority 8, quantity of 1000 and quantity per user 1000     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule8" is restricted to product "product2"                                                                                      # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule8" has a discount code "foo8"                                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I am not allowed to add 1 items of product "product4" in my cart                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAmNotAbleToAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule8"                                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 66.436 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with one cart rule
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, one cartRule                                                                                                                   # Features/Scenario/Cart/Calculation/CartRule/percent_mono.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one 50% global cartRule                                                                                   # Features/Scenario/Cart/Calculation/CartRule/percent_mono.feature:16
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 16.906 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 16.906 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one 50% global cartRule                                                                                   # Features/Scenario/Cart/Calculation/CartRule/percent_mono.feature:27
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 36.718 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 36.718 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one 5€ global cartRule (reduced product at first place)                                            # Features/Scenario/Cart/Calculation/CartRule/percent_mono.feature:38
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 84.7 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 84.7 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with multiple cart rules
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, 2 cartRules                                                                                                                    # Features/Scenario/Cart/Calculation/CartRule/percent_multiple.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 10.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" has a discount code "foo3"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule3"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, 2x % global cartRules                                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_multiple.feature:19
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 10.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" has a discount code "foo3"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule3"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 15.9154 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: one product in cart, quantity 3, one 50% global cartRule                                                                                   # Features/Scenario/Cart/Calculation/CartRule/percent_multiple.feature:34
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 10.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" has a discount code "foo3"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule3"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 33.7462 tax included                                                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: 3 products in cart, several quantities, 2x % global cartRules                                                                              # Features/Scenario/Cart/Calculation/CartRule/percent_multiple.feature:49
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule3" that applies a percent discount of 10.0% with priority 3, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule3" has a discount code "foo3"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 2 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule3"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 76.93 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with multiple cart rules without code
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: 3 products in cart, several quantities, 2x % global cartRules                                                                                # Features/Scenario/Cart/Calculation/CartRule/percent_no_code_multiple.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule14" that applies a percent discount of 10.0% with priority 14, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given there is a cart rule named "cartrule15" that applies a percent discount of 10.0% with priority 15, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule14"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule15"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 132.874 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with one cart rule restricted to one product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, one cartRule                                                                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_specific.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one specific 50% cartRule on product #2                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_specific.feature:18
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 26.812 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one specific 50% cartRule on product #2                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_specific.feature:31
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 66.436 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product #2 in cart, quantity 3, one specific 50% cartRule on product #2                                                                  # Features/Scenario/Cart/Calculation/CartRule/percent_specific.feature:44
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 55.582 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 55.582 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one specific 50% cartRule on product #2                                                              # Features/Scenario/Cart/Calculation/CartRule/percent_specific.feature:56
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 130.012 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with one cart rule restricted to one product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, one cartRule                                                                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_specific_mono.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, one specific 50% cartRule on product #2                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_specific_mono.feature:18
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 26.812 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, one specific 50% cartRule on product #2                                                                     # Features/Scenario/Cart/Calculation/CartRule/percent_specific_mono.feature:31
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 66.436 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product #2 in cart, quantity 3, one specific 50% cartRule on product #2                                                                  # Features/Scenario/Cart/Calculation/CartRule/percent_specific_mono.feature:44
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 55.582 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 55.582 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one specific 50% cartRule on product #2                                                              # Features/Scenario/Cart/Calculation/CartRule/percent_specific_mono.feature:56
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 130.012 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart rule (percent) calculation with multiple cart rules restricted to one product
  As a customer
  I must be able to have correct cart total when adding cart rules

  Scenario: Empty cart, 2 cartRules                                                                                                                      # Features/Scenario/Cart/Calculation/CartRule/percent_specific_multiple.feature:6
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule11" that applies a percent discount of 10.0% with priority 11, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule11" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule11" has a discount code "foo11"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Then I should have 0 different products in my cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule11"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 0.0 tax included                                                                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1, specific 50% cartRule on product #2, specific 10% cartRule on product #2                                    # Features/Scenario/Cart/Calculation/CartRule/percent_specific_multiple.feature:22
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule11" that applies a percent discount of 10.0% with priority 11, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule11" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule11" has a discount code "foo11"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 1 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule11"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 26.812 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3, specific 50% cartRule on product #2, specific 10% cartRule on product #2                                    # Features/Scenario/Cart/Calculation/CartRule/percent_specific_multiple.feature:39
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule11" that applies a percent discount of 10.0% with priority 11, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule11" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule11" has a discount code "foo11"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule11"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 66.436 tax included                                                                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product #2 in cart, quantity 3, specific 50% cartRule on product #2, specific 10% cartRule on product #2                                 # Features/Scenario/Cart/Calculation/CartRule/percent_specific_multiple.feature:56
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule11" that applies a percent discount of 10.0% with priority 11, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule11" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule11" has a discount code "foo11"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule11"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 50.7238 tax included                                                                                                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

  Scenario: 3 products in cart, several quantities, specific 50% cartRule on product #2, specific 10% cartRule on product #2                             # Features/Scenario/Cart/Calculation/CartRule/percent_specific_multiple.feature:73
    Given I have an empty default cart                                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given shop configuration for "PS_CART_RULE_FEATURE_ACTIVE" is set to 1                                                                               # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule10" that applies a percent discount of 50.0% with priority 10, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule10" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule10" has a discount code "foo10"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule11" that applies a percent discount of 10.0% with priority 11, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule11" is restricted to product "product2"                                                                                     # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedIsRestrictedToProductNamed()
    Given cart rule "cartrule11" has a discount code "foo11"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    When I add 3 items of product "product1" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product2" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule10"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule11"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    Then my cart total should be 126.7732 tax included                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()

@reset-database-before-feature
Feature: Cart calculation with currencies
  As a customer
  I must be able to have correct cart total when using distinct currencies

  Scenario: Empty cart (default USD/ current USD)                                             # Features/Scenario/Cart/Calculation/Currency/currency.feature:8
    Given I have an empty default cart                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Then I should have 0 different products in my cart                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:19
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.812 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:31
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.44 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.44 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Currency/currency.feature:43
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.4 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.4 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Empty cart (default USD/ current CHF)                                             # Features/Scenario/Cart/Calculation/Currency/currency.feature:61
    Given I have an empty default cart                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency2" is the current one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Then I should have 0 different products in my cart                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:72
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency2" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 33.515 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 33.515 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:84
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency2" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 83 tax included
    Then my cart total using previous calculation method should be 83 tax included

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Currency/currency.feature:96
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency2" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 203.0 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 203.0 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Empty cart (default CHF/ current USD)                                             # Features/Scenario/Cart/Calculation/Currency/currency.feature:114
    Given I have an empty default cart                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency2" is the default one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Then I should have 0 different products in my cart                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:125
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency2" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 24.66704 tax included                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 24.66704 tax included                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:137
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency2" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 61.12 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 61.12 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Currency/currency.feature:149
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency2" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 149.408 tax included                                                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 149.408 tax included                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Empty cart (default USD/ current EUR)                                             # Features/Scenario/Cart/Calculation/Currency/currency.feature:167
    Given I have an empty default cart                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency3" is the current one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Then I should have 0 different products in my cart                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:178
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency3" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 16.89156 tax included                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 16.89156 tax included                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:190
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency3" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 41.85 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 41.85 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Currency/currency.feature:202
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency1" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency3" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 102.312 tax included                                                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 102.312 tax included                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: Empty cart (default EUR/ current USD)                                             # Features/Scenario/Cart/Calculation/Currency/currency.feature:220
    Given I have an empty default cart                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63 # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency3" is the default one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Then I should have 0 different products in my cart                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:231
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency3" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 24.66704 tax included                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 24.66704 tax included                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Currency/currency.feature:243
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency3" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 61.12 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 61.12 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Currency/currency.feature:255
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a currency named "currency1" with iso code "USD" and exchange rate of 0.92               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency2" with iso code "CHF" and exchange rate of 1.25               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given there is a currency named "currency3" with iso code "EUR" and exchange rate of 0.63               # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::thereIsACurrency()
    Given currency "currency3" is the default one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setDefaultCurrency()
    Given currency "currency1" is the current one                                                           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::setCurrentCurrency()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 149.408 tax included                                                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 149.408 tax included                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with only products and gift wrapping
  As a customer
  I must be able to have correct cart total when adding products, and selecting gift wrapping

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/Product/gift_wrapping.feature:6
    Given shop configuration for "PS_GIFT_WRAPPING" is set to 1                     # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given shop configuration for "PS_GIFT_WRAPPING_PRICE" is set to 5.3             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    When I select gift wrapping                                                     # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iSelectGiftWrapping()
    Then I should have 0 different products in my cart                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Product/gift_wrapping.feature:15
    Given shop configuration for "PS_GIFT_WRAPPING" is set to 1                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given shop configuration for "PS_GIFT_WRAPPING_PRICE" is set to 5.3                                     # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select gift wrapping                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iSelectGiftWrapping()
    Then my cart total should be 32.112 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 32.112 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Product/gift_wrapping.feature:25
    Given shop configuration for "PS_GIFT_WRAPPING" is set to 1                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given shop configuration for "PS_GIFT_WRAPPING_PRICE" is set to 5.3                                     # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select gift wrapping                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iSelectGiftWrapping()
    Then my cart total should be 71.736 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 71.736 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Product/gift_wrapping.feature:35
    Given shop configuration for "PS_GIFT_WRAPPING" is set to 1                                             # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given shop configuration for "PS_GIFT_WRAPPING_PRICE" is set to 5.3                                     # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select gift wrapping                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iSelectGiftWrapping()
    Then my cart total should be 167.7 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 167.7 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with only products
  As a customer
  I must be able to have correct cart total when adding products

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/Product/only_products.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Then I should have 0 different products in my cart                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::productCountInMyCartShouldBe()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/Product/only_products.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.812 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/Product/only_products.feature:19
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.436 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.436 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/Product/only_products.feature:26
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.4 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.4 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with only products with specific prices
  As a customer
  I must be able to have correct cart total when adding products

  Scenario: multiple products in cart, several quantities, one product with specific prices                 # Features/Scenario/Cart/Calculation/Product/specific_price.feature:6
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given product "product1" has a specific price named "specificPrice1" with an amount discount of 3.0     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::productWithNameHasASpecificPriceWithAmountDiscount()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 153.4 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 153.4 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding mode DOWN
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding modes

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingMode/round_down.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round down      # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_down.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round down                              # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.81 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.81 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_down.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round down                              # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.43 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.43 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingMode/round_down.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round down                              # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.38 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.38 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding mode HALF_DOWN
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding modes

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingMode/round_half_down.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half down # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_down.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half down                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.81 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.81 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_down.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half down                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.44 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.44 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingMode/round_half_down.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half down                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.41 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.41 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding mode HALF_EVEN
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding modes

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingMode/round_half_even.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half even # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_even.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half even                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.81 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.81 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_even.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half even                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.44 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.44 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingMode/round_half_even.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half even                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.41 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.41 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding mode HALF_ODD
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding modes

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingMode/round_half_odd.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half odd  # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_odd.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half odd                          # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.81 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.81 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_odd.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half odd                          # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.44 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.44 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingMode/round_half_odd.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half odd                          # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.41 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.41 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding mode HALF_UP
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding modes

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingMode/round_half_up.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half up   # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_up.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half up                           # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.81 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.81 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_half_up.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half up                           # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.44 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.44 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingMode/round_half_up.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round half up                           # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.41 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.41 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding mode UP
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding modes

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingMode/round_up.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round up        # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_up.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round up                                # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.82 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.82 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingMode/round_up.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round up                                # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 66.44 tax included                                                         # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 66.44 tax included                       # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingMode/round_up.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding mode" is set to round up                                # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingModeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 162.41 tax included                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.41 tax included                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding type ITEM
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding types

  Scenario: Empty cart                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_item.feature:6
    Given I have an empty default cart                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each article # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be precisely 0.0 tax included                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_item.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each article                      # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 26.812 tax included                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 26.812 tax included            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_item.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each article                      # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 66.436 tax included                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 66.436 tax included            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingType/round_item.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each article                      # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 162.4 tax included                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 162.4 tax included             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding type LINE
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding types

  Scenario: Empty cart                                                              # Features/Scenario/Cart/Calculation/RoundingType/round_line.feature:6
    Given I have an empty default cart                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each line # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_line.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each line                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 26.812 tax included                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 26.812 tax included            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_line.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each line                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 66.436 tax included                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 66.436 tax included            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingType/round_line.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round each line                         # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 162.4 tax included                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 162.4 tax included             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with rounding type TOTAL
  As a customer
  I must be able to have correct cart total when configuration is set to different rounding types

  Scenario: Empty cart                                                                        # Features/Scenario/Cart/Calculation/RoundingType/round_total.feature:6
    Given I have an empty default cart                                                        # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round cart total          # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Then my cart total should be precisely 0.0 tax included                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 0.0 tax included # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 1                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_total.feature:12
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round cart total                        # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 26.812 tax included                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 26.812 tax included            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: one product in cart, quantity 3                                                                 # Features/Scenario/Cart/Calculation/RoundingType/round_total.feature:20
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round cart total                        # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 66.436 tax included                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 66.436 tax included            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities                                                          # Features/Scenario/Cart/Calculation/RoundingType/round_total.feature:28
    Given I have an empty default cart                                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given specific shop configuration for "rounding type" is set to round cart total                        # Tests\Integration\Behaviour\Features\Context\Configuration\RoundingTypeConfigurationFeatureContext::setRoundingMode()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                     # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be precisely 162.4 tax included                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be precisely 162.4 tax included             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with specific price rule (amount)
  As a customer
  I must be able to have correct cart total when adding specific price rule

  Scenario: 1 product in cart, quantity 1, one rule amount from quantity 1                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:6
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with an amount discount of 1 and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 25.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 25.812 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 1, one rule amount from quantity 2                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:14
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with an amount discount of 3 and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 3, one rule amount from quantity 1                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:22
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with an amount discount of 1 and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 63.436 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 63.436 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 3, one rule amount from quantity 2                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:30
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with an amount discount of 3 and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 57.436 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 57.436 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule amount from quantity 1                                # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:38
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with an amount discount of 1 and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 156.4 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 156.4 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule amount from quantity 2                                # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:50
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with an amount discount of 3 and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 147.4 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 147.4 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule amount from quantity 2                                  # Features/Scenario/Cart/Calculation/SpecificPriceRule/amount.feature:62
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule3" with an amount discount of 300 and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 38.188 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 38.188 tax included                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with specific price rule (mixed)
  As a customer
  I must be able to have correct cart total when adding specific price rule

  Scenario: 3 products in cart, several quantities, one rule percent with price set from quantity 1                  # Features/Scenario/Cart/Calculation/SpecificPriceRule/mixed.feature:6
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 10% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule1" changes product price to 2.0                                              # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 17.8 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 17.8 tax included                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule amount with price set from quantity 1                 # Features/Scenario/Cart/Calculation/SpecificPriceRule/mixed.feature:19
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with an amount discount of 3 and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given specific price rule "priceRule2" changes product price to 2.0                                            # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 7.0 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 7.0 tax included                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule percent with price set from quantity 2                  # Features/Scenario/Cart/Calculation/SpecificPriceRule/mixed.feature:32
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule3" with a percent discount of 10% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule3" changes product price to 2.0                                              # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 47.188 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 47.188 tax included                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule amount with price set from quantity 2                 # Features/Scenario/Cart/Calculation/SpecificPriceRule/mixed.feature:45
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule4" with an amount discount of 3 and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRuleAmount()
    Given specific price rule "priceRule4" changes product price to 2.0                                            # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 38.188 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 38.188 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with specific price rule (percent)
  As a customer
  I must be able to have correct cart total when adding specific price rule

  Scenario: 1 product in cart, quantity 1, one rule percent from quantity 1                                          # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent.feature:6
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 23% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 22.25524 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 22.25524 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 1, one rule percent from quantity 2                                          # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent.feature:14
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 15% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.812 tax included                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 3, one rule percent from quantity 1                                          # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent.feature:22
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 23% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 52.76572 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 52.76572 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 3, one rule percent from quantity 2                                          # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent.feature:30
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 15% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 57.5206 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 57.5206 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule percent from quantity 1                                 # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent.feature:38
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 23% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 126.658 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 126.658 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule percent from quantity 2                                 # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent.feature:50
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 15% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 143.7682 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 143.7682 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with specific price rule (percent multiple)
  As a customer
  I must be able to have correct cart total when adding specific price rule

  Scenario: 1 product in cart, quantity 1, 2 rule percent from quantity 1, first is used                             # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent_multiple.feature:6
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 23% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a specific price rule named "priceRule2" with a percent discount of 15% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 22.25524 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 22.25524 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 1, 2 rule percent from quantity 1, reversed, first is used                   # Features/Scenario/Cart/Calculation/SpecificPriceRule/percent_multiple.feature:15
    Given I have an empty default cart                                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 15% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a specific price rule named "priceRule1" with a percent discount of 23% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock          # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 23.8402 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 23.8402 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with specific price rule (price set)
  As a customer
  I must be able to have correct cart total when adding specific price rule

  Scenario: 1 product in cart, quantity 1, one rule percent from quantity 1                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/price_set.feature:6
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 0% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule1" changes product price to 2.0                                             # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 9.0 tax included                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 9.0 tax included                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 1, one rule percent from quantity 2                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/price_set.feature:15
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 0% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule2" changes product price to 2.0                                             # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 1 items of product "product1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 26.812 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 26.812 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 3, one rule percent from quantity 1                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/price_set.feature:24
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 0% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule1" changes product price to 2.0                                             # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 13.0 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 13.0 tax included                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 1 product in cart, quantity 3, one rule percent from quantity 2                                         # Features/Scenario/Cart/Calculation/SpecificPriceRule/price_set.feature:33
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 0% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule2" changes product price to 2.0                                             # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 3 items of product "product1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 13.0 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 13.0 tax included                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule percent from quantity 1                                # Features/Scenario/Cart/Calculation/SpecificPriceRule/price_set.feature:42
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule1" with a percent discount of 0% and minimum quantity of 1 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule1" changes product price to 2.0                                             # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 19.0 tax included                                                                  # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.0 tax included                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

  Scenario: 3 products in cart, several quantities, one rule percent from quantity 2                                # Features/Scenario/Cart/Calculation/SpecificPriceRule/price_set.feature:55
    Given I have an empty default cart                                                                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a specific price rule named "priceRule2" with a percent discount of 0% and minimum quantity of 2 # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::insertSpecificPriceRulePercent()
    Given specific price rule "priceRule2" changes product price to 2.0                                             # Tests\Integration\Behaviour\Features\Context\SpecificPriceRuleFeatureContext::setPriceModifier()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock         # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    When I add 2 items of product "product2" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 3 items of product "product1" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product3" in my cart                                                             # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    Then my cart total should be 48.188 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 48.188 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Cart calculation with tax
  As a customer
  I must be able to have correct cart total when using taxes

  Scenario: empty cart                                                                                 # Features/Scenario/Cart/Calculation/Taxes/tax.feature:6
    Given I have an empty default cart                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a zone named "zone1"                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1" # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    When I select address "address1" in my cart                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 0.0 tax included                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 0.0 tax excluded                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax excluded                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                  # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 0.0 tax included                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax included                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 0.0 tax excluded                                                      # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 0.0 tax excluded                    # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

  Scenario: tax #1: one product in cart, quantity 1                                                                # Features/Scenario/Cart/Calculation/Taxes/tax.feature:23
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    When I add 1 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 20.60448 tax included                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 20.60448 tax included                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 19.812 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 19.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 19.812 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

  Scenario: tax #2: one product in cart, quantity 1                                                                # Features/Scenario/Cart/Calculation/Taxes/tax.feature:45
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product5" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 6.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product5" belongs to tax group "taxrule1"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    When I add 1 items of product "product5" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 21.00072 tax included                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 21.00072 tax included                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 19.812 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 19.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 19.812 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

  Scenario: tax #3: one product in cart, quantity 1                                                                # Features/Scenario/Cart/Calculation/Taxes/tax.feature:67
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product5" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 0.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product5" belongs to tax group "taxrule1"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    When I add 1 items of product "product5" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 19.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 19.812 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 19.812 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 19.812 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 19.812 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

  Scenario: tax #1: one product in cart, quantity 3                                                                # Features/Scenario/Cart/Calculation/Taxes/tax.feature:89
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 61.81344 tax included                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 61.81344 tax included                           # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 59.436 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 59.436 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 59.436 tax included                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 59.436 tax included                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 59.436 tax excluded                                                               # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 59.436 tax excluded                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

  Scenario: multiple taxes, multiple products, several quantities                                                  # Features/Scenario/Cart/Calculation/Taxes/tax.feature:111
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a tax named "tax2" and rate 6.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule2"in country "country1" and state "state1" where tax "tax2" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product2" belongs to tax group "taxrule2"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a tax named "tax3" and rate 10.0%                                                               # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule3"in country "country1" and state "state1" where tax "tax3" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product3" belongs to tax group "taxrule3"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product2" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product3" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 164.75832 tax included                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 164.75832 tax included                          # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 154.2 tax excluded                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 154.2 tax excluded                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 154.2 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 154.2 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 154.2 tax excluded                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 154.2 tax excluded                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

  Scenario: multiple taxes, multiple products, several quantities, one tax is null                                 # Features/Scenario/Cart/Calculation/Taxes/tax.feature:143
    Given I have an empty default cart                                                                             # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock        # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a zone named "zone1"                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"             # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a tax named "tax2" and rate 0.0%                                                                # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule2"in country "country1" and state "state1" where tax "tax2" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product2" belongs to tax group "taxrule2"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a tax named "tax3" and rate 10.0%                                                               # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule3"in country "country1" and state "state1" where tax "tax3" is applied # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product3" belongs to tax group "taxrule3"                                                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    When I add 3 items of product "product1" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product2" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product3" in my cart                                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I select address "address1" in my cart                                                                    # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    Then my cart total should be 162.81504 tax included                                                            # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 162.81504 tax included                          # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 154.2 tax excluded                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 154.2 tax excluded                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()
    Given shop configuration for "PS_TAX" is set to 0                                                              # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::shopConfigurationOfIsSetTo()
    Then my cart total should be 154.2 tax included                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtShouldBe()
    Then my cart total using previous calculation method should be 154.2 tax included                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithTaxtOnPreviousCaclculationMethodShouldBe()
    Then my cart total should be 154.2 tax excluded                                                                # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxShouldBe()
    Then my cart total using previous calculation method should be 154.2 tax excluded                              # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::totalCartWithoutTaxOnPreviousCaclculationMethodShouldBe()

@reset-database-before-feature
Feature: Check cart to order data copy
  As a customer
  I must be able to have a correct order when validating payment step

  Scenario: 1 product in cart, 1 cart rule                                                                                                             # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:6
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                                    # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                                        # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                                    # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                                     # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                                  # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 20.604480 tax included                                                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 19.812000 tax excluded                                                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 10.302240 tax included                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 9.906000 tax excluded                                                                             # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 10.3 tax included and 9.91 tax excluded                             # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then customer "customer1" should have 0 cart rules that apply to him                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()

  Scenario: 1 product in cart, 2 cart rules                                                                                                            # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:40
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                                    # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                                        # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                                    # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                                     # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                                  # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 20.604480 tax included                                                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 19.812000 tax excluded                                                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 15.453360 tax included                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 14.859000 tax excluded                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 10.3 tax included and 9.91 tax excluded                             # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then current cart order should have a discount in position 2 with an amount of 5.15 tax included and 4.95 tax excluded                             # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then customer "customer1" should have 0 cart rules that apply to him                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()

  Scenario: 3 product in cart, 1 cart rule                                                                                                             # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:78
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                                    # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                                        # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                                    # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                                     # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given product "product2" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given product "product3" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                                  # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 119.159040 tax included                                                                       # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 114.576000 tax excluded                                                                       # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 59.579520 tax included                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 57.288000 tax excluded                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 59.58 tax included and 57.29 tax excluded                           # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then customer "customer1" should have 0 cart rules that apply to him                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()

  Scenario: 3 product in cart, 3 cart rules                                                                                                            # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:118
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                                    # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                                        # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product2" with a price of 32.388 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product3" with a price of 31.188 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule1" that applies a percent discount of 50.0% with priority 1, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule1" has a discount code "foo1"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a cart rule named "cartrule2" that applies a percent discount of 50.0% with priority 2, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndPercentDiscountOf50AndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule2" has a discount code "foo2"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                                    # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                                     # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given product "product2" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given product "product3" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product2" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 2 items of product "product3" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I use the discount "cartrule2"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                                  # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 119.159040 tax included                                                                       # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 114.576000 tax excluded                                                                       # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 89.369280 tax included                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 85.932000 tax excluded                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 59.58 tax included and 57.29 tax excluded                           # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then current cart order should have a discount in position 2 with an amount of 29.79 tax included and 28.65 tax excluded                           # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
      Expects 29.79, got 28.64 instead (RuntimeException)
    Then customer "customer1" should have 0 cart rules that apply to him                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()

  Scenario: 1 product in cart, 1 cart rule with too-much amount                                                                                        # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:162
    Given I have an empty default cart                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                                    # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                                        # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                                            # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule5" that applies an amount discount of 500.0 with priority 5, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndAmountDiscountOfAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule5" has a discount code "foo5"                                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given there is a zone named "zone1"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                                 # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                                    # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                                     # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                                           # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                                     # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                                # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                                 # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product1" in my cart                                                                                                # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule5"                                                                                                                # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                                        # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                                  # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 20.604480 tax included                                                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 19.812000 tax excluded                                                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 20.604480 tax included                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 19.812000 tax excluded                                                                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                                   # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 20.6 tax included and 19.81 tax excluded                            # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then customer "customer1" should have 1 cart rules that apply to him                                                                               # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()
    Then cart rule for customer "customer1" in position 1 should apply a discount of 480.19                                                            # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleValueForCustomer()

  Scenario: 1 product in cart, 1 cart rule offering free gift                                                                            # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:197
    Given I have an empty default cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                      # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                          # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule13" that applies no discount with priority 13, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndNoDiscountAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule13" has a discount code "foo13"                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule13" offers a gift product "product4"                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    Given there is a zone named "zone1"                                                                                                  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                      # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                             # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given product "product4" belongs to tax group "taxrule1"                                                                             # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                     # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product1" in my cart                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule13"                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                    # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 57.594160 tax included                                                          # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 55.379000 tax excluded                                                          # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 36.989680 tax included                                                              # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 35.567000 tax excluded                                                              # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                     # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                     # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 36.99 tax included and 35.57 tax excluded             # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then customer "customer1" should have 0 cart rules that apply to him                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()

  Scenario: 2 product in cart, 1 cart rule offering free gift, offering same product as already existing in cart                         # Features/Scenario/Cart/CartToOrder/cart_to_order.feature:234
    Given I have an empty default cart                                                                                                   # Tests\Integration\Behaviour\Features\Context\CartFeatureContext::iHaveAnEmptyDefaultCart()
    Given email sending is disabled                                                                                                      # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()
    Given shipping handling fees are set to 2.0                                                                                          # Tests\Integration\Behaviour\Features\Context\Configuration\CommonConfigurationFeatureContext::setShippingHandlingFees()
    Given there is a product in the catalog named "product1" with a price of 19.812 and 1000 items in stock                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a product in the catalog named "product4" with a price of 35.567 and 1000 items in stock                              # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsAProductWithNameAndPriceAndQuantity()
    Given there is a cart rule named "cartrule13" that applies no discount with priority 13, quantity of 1000 and quantity per user 1000 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::thereIsACartRuleWithNameAndNoDiscountAndPriorityOfAndQuantityOfAndQuantityPerUserOf()
    Given cart rule "cartrule13" has a discount code "foo13"                                                                             # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasACode()
    Given cart rule "cartrule13" offers a gift product "product4"                                                                        # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::cartRuleNamedHasAGiftProductNamed()
    Given there is a zone named "zone1"                                                                                                  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createZone()
    Given there is a country named "country1" and iso code "FR" in zone "zone1"                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCountry()
    Given there is a state named "state1" with iso code "TEST-1" in country"country1" and zone "zone1"                                   # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createState()
    Given there is an address named "address1" with postcode "1" in state "state1"                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createAddress()
    Given there is a tax named "tax1" and rate 4.0%                                                                                      # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTax()
    Given there is a tax rule named "taxrule1"in country "country1" and state "state1" where tax "tax1" is applied                       # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::createTaxRule()
    Given product "product1" belongs to tax group "taxrule1"                                                                             # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given product "product4" belongs to tax group "taxrule1"                                                                             # Tests\Integration\Behaviour\Features\Context\TaxFeatureContext::setProductTaxRuleGroup()
    Given there is a customer named "customer1" whose email is "fake@prestashop.com"                                                     # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::createCustomer()
    Given address "address1" is associated to customer "customer1"                                                                       # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setAddressCustomer()
    Given there is a carrier named "carrier1"                                                                                            # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::createCarrier()
    Given carrier "carrier1" ships to all groups                                                                                         # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierShipsToAllGroups()
    Given carrier "carrier1" applies shipping fees of 5.0 in zone "zone1" for price between 0 and 10000                                  # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCarrierFees()
    When I am logged in as "customer1"                                                                                                   # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::setCurrentCustomer()
    When I add 1 items of product "product1" in my cart                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I add 1 items of product "product4" in my cart                                                                                  # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::iAddProductNamedInMyCartWithQuantity()
    When I use the discount "cartrule13"                                                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::iAddCartRuleNamedToMyCart()
    When I select address "address1" in my cart                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartAddress()
    When I select carrier "carrier1" in my cart                                                                                          # Tests\Integration\Behaviour\Features\Context\CarrierFeatureContext::setCartCarrier()
    When I validate my cart using payment module fake                                                                                    # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::validateCartWithPaymentModule()
    Then current cart order total for products should be 94.583840 tax included                                                          # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total for products should be 90.946000 tax excluded                                                          # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderProductTotal()
    Then current cart order total discount should be 36.989680 tax included                                                              # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order total discount should be 35.567000 tax excluded                                                              # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderTotalDiscount()
    Then current cart order shipping fees should be 7.0 tax included                                                                     # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order shipping fees should be 7.0 tax excluded                                                                     # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderShippingFees()
    Then current cart order should have a discount in position 1 with an amount of 36.99 tax included and 35.57 tax excluded             # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::checkOrderDiscount()
    Then customer "customer1" should have 0 cart rules that apply to him                                                                 # Tests\Integration\Behaviour\Features\Context\CartRuleFeatureContext::checkCartRuleCountForCustomer()

@reset-database-before-feature
Feature: Add Order from Back Office
  PrestaShop allows BO users to add new orders in the Sell > Orders > Add new Order page
  As a BO user
  I must be able to place an order for FO customers

  Background:                       # Features/Scenario/Order/add_order_from_bo.feature:8
    Given email sending is disabled # Tests\Integration\Behaviour\Features\Context\Configuration\EmailConfigurationFeatureContext::disableEmail()

  Scenario: Add order from Back Office with free shipping                                                              # Features/Scenario/Order/add_order_from_bo.feature:11
    Given I am logged in as "test@prestashop.com" employee                                                             # Tests\Integration\Behaviour\Features\Context\EmployeeFeatureContext::logsInBackOffice()
    And there is customer "customer1" with email "pub@prestashop.com"                                                  # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::customerExists()
    And customer "customer1" has address in "US" country                                                               # Tests\Integration\Behaviour\Features\Context\CustomerFeatureContext::customerHasAddressInCountry()
    And the module "dummy_payment" is installed                                                                        # Tests\Integration\Behaviour\Features\Context\ModuleFeatureContext::theModuleIsInstalled()
    When I create an empty cart "cart1" for customer "customer1"                                                       # Tests\Integration\Behaviour\Features\Context\Domain\CartFeatureContext::createEmptyCartForCustomer()
    And I add 2 products with reference "demo_13" to the cart "cart1"                                                  # Tests\Integration\Behaviour\Features\Context\Domain\CartFeatureContext::addProductToCarts()
    And I select "US" address as delivery and invoice address for customer "customer1" in cart "cart1"                 # Tests\Integration\Behaviour\Features\Context\Domain\CartFeatureContext::selectAddressAsDeliveryAndInvoiceAddress()
    And I set Free shipping to the cart "cart1"                                                                        # Tests\Integration\Behaviour\Features\Context\Domain\CartFeatureContext::setFreeShippingToCart()
    And I add order "order1" from cart "cart1" with "dummy_payment" payment method and "Payment accepted" order status # Tests\Integration\Behaviour\Features\Context\Domain\OrderFeatureContext::placeOrderWithPaymentMethodAndOrderStatus()
    Then order "order1" should have 2 products in total                                                                # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::assertOrderProductsQuantity()
    And order "order1" should have free shipping                                                                       # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::createdOrderShouldHaveFreeShipping()
    And order "order1" should have "dummy_payment" payment method                                                      # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::createdOrderShouldHavePaymentMethod()

@reset-database-before-feature
Feature: Adding products to an existing Order
  PrestaShop allows BO users to manage Orders in the Sell > Orders
  As a BO user
  I must be able to add product to an existing Order

  Scenario: Add product to an existing Order with free shipping and new invoice                                     # Features/Scenario/Order/add_product.feature:7
    Given there is order with reference "XKBKNABJK"                                                                 # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::thereIsOrderWithReference()
    And there is product with reference "demo_5"                                                                    # Tests\Integration\Behaviour\Features\Context\ProductFeatureContext::thereIsProductOfTypeWithReference()
    And order with reference "XKBKNABJK" does not contain product with reference "demo_5"                           # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::orderDoesNotContainProductWithReference()
    When I add 2 products with reference "demo_5", price 16 and free shipping to order "XKBKNABJK" with new invoice # Tests\Integration\Behaviour\Features\Context\Domain\OrderFeatureContext::addProductToOrderWithFreeShippingAndNewInvoice()
    Then order "XKBKNABJK" should contain 2 products with reference "demo_5"                                        # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::orderContainsProductWithReference()

@reset-database-before-feature
Feature: Generating invoice for Order
  As a merchant
  I must be able to generate invoice for Order

  Scenario: Generating invoice for Order that does not have any invoices # Features/Scenario/Order/generate_invoice.feature:6
    Given there is order with reference "XKBKNABJK"                      # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::thereIsOrderWithReference()
    And order "XKBKNABJK" does not have any invoices                     # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::orderDoesNotHaveAnyInvoices()
    When I generate invoice for "XKBKNABJK" order                        # Tests\Integration\Behaviour\Features\Context\Domain\OrderFeatureContext::generateOrderInvoice()
    Then order "XKBKNABJK" should have invoice                           # Tests\Integration\Behaviour\Features\Context\OrderFeatureContext::orderShouldHaveInvoice()

@reset-database-before-feature
Feature: Currency Management
  PrestaShop allows BO users to manage currencies
  As a BO user
  I must be able to create, edit and delete currencies in my shop

  Background:                                       # Features/Scenario/Currency/currency_management.feature:8
    Given shop "shop1" with name "test_shop" exists # Tests\Integration\Behaviour\Features\Context\ShopFeatureContext::shopWithNameExists()

  Scenario: Adding and editing currency                            # Features/Scenario/Currency/currency_management.feature:11
    When I add new currency "currency1" with following properties: # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::addCurrency()
      | iso_code         | EUR   |
      | exchange_rate    | 0.88  |
      | is_enabled       | 1     |
      | shop_association | shop1 |
    Then currency "currency1" should be "EUR"                      # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyIsoCode()
    And currency "currency1" exchange rate should be 0.88          # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyExchangeRate()
    And currency "currency1" should have status enabled            # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyStatus()
    And currency "currency1" should be available in shop "shop1"   # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyIsAvailableInShop()
    When I edit currency "currency1" with following properties:    # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::editCurrency()
      | iso_code         | GBP   |
      | exchange_rate    | 1.22  |
      | is_enabled       | 0     |
      | shop_association | shop1 |
    Then currency "currency1" should be "GBP"                      # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyIsoCode()
    And currency "currency1" exchange rate should be 1.22          # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyExchangeRate()
    And currency "currency1" should have status disabled           # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyStatus()

  Scenario: Disabling default currency should not be allowed         # Features/Scenario/Currency/currency_management.feature:30
    Given currency "currency2" with "USD" exists                     # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyExists()
    And currency "currency2" is default in "shop1" shop              # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyIsDefaultInShop()
    When I disable currency "currency2"                              # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::disableCurrency()
    Then I should get error that default currency cannot be disabled # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::assertLastErrorIsDefaultCurrencyCannotBeDisabled()

  Scenario: Deleting default currency should not be allowed         # Features/Scenario/Currency/currency_management.feature:36
    Given currency "currency3" with "USD" exists                    # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyExists()
    And currency "currency3" is default in "shop1" shop             # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyIsDefaultInShop()
    When I delete currency "currency3"                              # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::deleteCurrency()
    Then I should get error that default currency cannot be deleted # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::assertLastErrorIsDefaultCurrencyCannotBeDeleted()

  Scenario: Deleting non default currency should be allowed        # Features/Scenario/Currency/currency_management.feature:42
    When I add new currency "currency4" with following properties: # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::addCurrency()
      | iso_code         | EUR   |
      | exchange_rate    | 0.88  |
      | is_enabled       | 1     |
      | shop_association | shop1 |
    When I delete currency "currency4"                             # Tests\Integration\Behaviour\Features\Context\Domain\CurrencyFeatureContext::deleteCurrency()
    Then "EUR" currency should be deleted                          # Tests\Integration\Behaviour\Features\Context\CurrencyFeatureContext::assertCurrencyIsDeleted()

@reset-database-before-feature
Feature: Webservice key management
  PrestaShop allows BO users to manage Webservice keys
  As a BO user
  I must be able to create, edit and delete Webservice keys

  Background:                                       # Features/Scenario/Webservice/webservice_key_management.feature:8
    Given shop "shop1" with name "test_shop" exists # Tests\Integration\Behaviour\Features\Context\ShopFeatureContext::shopWithNameExists()

  Scenario: Create Webservice key                                                                                       # Features/Scenario/Webservice/webservice_key_management.feature:11
    Given I specify following properties for new webservice key "key1":                                                 # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyPropertiesForWebserviceKey()
      | key              | DFS51LTKBBMBGF5QQRG523JMQYEHU4X7 |
      | description      | Testing webservice key           |
      | is_enabled       | 1                                |
      | shop_association | shop1                            |
    And I specify "View" permission for "addresses, carriers, carts" resources for new webservice key "key1"            # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    And I specify "Add" permission for "orders, products, groups" resources for new webservice key "key1"               # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    And I specify "Modify" permission for "employees, customers, manufacturers" resources for new webservice key "key1" # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    And I specify "Delete" permission for "suppliers, languages, countries" resources for new webservice key "key1"     # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    And I specify "Fast view" permission for "taxes, zones" resources for new webservice key "key1"                     # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    When I add webservice key "key1" with specified properties                                                          # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::addWebserviceKeyFromSpecifiedProperties()
    Then webservice key "key1" key should be "DFS51LTKBBMBGF5QQRG523JMQYEHU4X7"                                         # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyMatches()
    And webservice key "key1" description should be "Testing webservice key"                                            # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceDescriptionMatches()
    And webservice key "key1" should be enabled                                                                         # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyStatus()
    And webservice key "key1" should have "View" permission for "addresses, carriers, carts" resources                  # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyPermission()
    And webservice key "key1" should have "Add" permission for "orders, products, groups" resources                     # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyPermission()
    And webservice key "key1" should have "Modify" permission for "employees, customers, manufacturers" resources       # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyPermission()
    And webservice key "key1" should have "Delete" permission for "suppliers, languages, countries" resources           # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyPermission()
    And webservice key "key1" should have "Fast view" permission for "taxes, zones" resources                           # Tests\Integration\Behaviour\Features\Context\WebserviceKeyFeatureContext::assertWebserviceKeyPermission()

  Scenario: Creating Webservice key with duplicate key should not be allowed                                 # Features/Scenario/Webservice/webservice_key_management.feature:32
    Given I specify following properties for new webservice key "key1":                                      # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyPropertiesForWebserviceKey()
      | key              | DFS51LTKBBMBGF5QQRG523JMQYEHU4X7 |
      | description      | Testing webservice key           |
      | is_enabled       | 1                                |
      | shop_association | shop1                            |
    And I specify "View" permission for "addresses, carriers, carts" resources for new webservice key "key1" # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    And I add webservice key "key1" with specified properties                                                # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::addWebserviceKeyFromSpecifiedProperties()
    Given I specify following properties for new webservice key "key2":                                      # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyPropertiesForWebserviceKey()
      | key              | DFS51LTKBBMBGF5QQRG523JMQYEHU4X7 |
      | description      | Testing webservice key           |
      | is_enabled       | 1                                |
      | shop_association | shop1                            |
    And I specify "View" permission for "addresses, carriers, carts" resources for new webservice key "key2" # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::specifyResourcePermissions()
    When I add webservice key "key2" with specified properties                                               # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::addWebserviceKeyFromSpecifiedProperties()
    Then I should get error that webservice key is duplicate                                                 # Tests\Integration\Behaviour\Features\Context\Domain\WebserviceKeyFeatureContext::assertLastErrorIsDuplicateWebserviceKey()

--- Scénarios échoués:

    Features/Scenario/Cart/CartToOrder/cart_to_order.feature:118

237 scénarios (235 succès, 1 échecs, 1 indéfinis)
2846 étapes (2842 succès, 1 échecs, 2 indéfinis, 1 ignorés)
3m53.30s (59.68Mb)


--- Tests\Integration\Behaviour\Features\Context\CommonFeatureContext a des étapes manquantes. Définissez-les avec les modèles suivants :

    /**
     * @Then my cart total should be :arg1 tax included
     */
    public function myCartTotalShouldBeTaxIncluded($arg1)
    {
        throw new PendingException();
    }

    /**
     * @Then my cart total using previous calculation method should be :arg1 tax included
     */
    public function myCartTotalUsingPreviousCalculationMethodShouldBeTaxIncluded($arg1)
    {
        throw new PendingException();
    }

