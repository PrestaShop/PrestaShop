/*! For license information please see logs.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={4110:(t,n)=>{var o=window.$;n.Z=function(t,n){o.post(t).then((function(){return window.location.assign(n)}))}}},n={};function o(e){var r=n[e];if(void 0!==r)return r.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var e={};(()=>{o.r(e);const t=".js-grid-action-submit-btn",n=".js-common_show_query-grid-action",r=".js-common_export_sql_manager-grid-action",i=function(t){return"#"+t+"_common_show_query_modal_form"},a=function(t){return"#"+t+"_grid_common_show_query_modal"},c=function(t){return'input[name="'+t+'[_token]"]'},d=".grid-search-button";var u=window.$;const s=function(){function t(t){this.id=t,this.$container=u(function(t){return"#"+t+"_grid"}(this.id))}return t.prototype.getId=function(){return this.id},t.prototype.getContainer=function(){return this.$container},t.prototype.getHeaderContainer=function(){return this.$container.closest(".js-grid-panel").find(".js-grid-header")},t.prototype.addExtension=function(t){t.extend(this)},t}(),f=function(){function t(){}return t.prototype.extend=function(t){t.getHeaderContainer().on("click",".js-common_refresh_list-grid-action",(function(){window.location.reload()}))},t}();var l=window.$;const p=function(){function t(){}return t.prototype.extend=function(t){var o=this;t.getHeaderContainer().on("click",n,(function(){return o.onShowSqlQueryClick(t)})),t.getHeaderContainer().on("click",r,(function(){return o.onExportSqlManagerClick(t)}))},t.prototype.onShowSqlQueryClick=function(t){var n=l(i(t.getId()));this.fillExportForm(n,t);var o=l(a(t.getId()));o.modal("show"),o.on("click",".btn-sql-submit",(function(){return n.submit()}))},t.prototype.onExportSqlManagerClick=function(t){var n=l(i(t.getId()));this.fillExportForm(n,t),n.submit()},t.prototype.fillExportForm=function(t,n){var o=n.getContainer().find(".js-grid-table").data("query");t.find('textarea[name="sql"]').val(o),t.find('input[name="name"]').val(this.getNameFromBreadcrumb())},t.prototype.getNameFromBreadcrumb=function(){var t=l(".header-toolbar").find(".breadcrumb-item"),n="";return t.each((function(t,o){var e=l(o),r=e.find("a").length>0?e.find("a").text():e.text();n.length>0&&(n=n.concat(" > ")),n=n.concat(r)})),n},t}();var m=o(4110),g=window.$;const h=function(){function t(){}return t.prototype.extend=function(t){t.getContainer().on("click",".js-reset-search",(function(t){(0,m.Z)(g(t.currentTarget).data("url"),g(t.currentTarget).data("redirect"))}))},t}();var w=window.$;const y=function(){function t(t){this.selector=".ps-sortable-column",this.columns=w(t).find(this.selector)}return t.prototype.attach=function(){var t=this;this.columns.on("click",(function(n){var o=w(n.delegateTarget);t.sortByColumn(o,t.getToggledSortDirection(o))}))},t.prototype.sortBy=function(t,n){if(!this.columns.is('[data-sort-col-name="'+t+'"]'))throw new Error('Cannot sort by "'+t+'": invalid column');this.sortByColumn(this.columns,n)},t.prototype.sortByColumn=function(t,n){window.location.href=this.getUrl(t.data("sortColName"),"desc"===n?"desc":"asc",t.data("sortPrefix"))},t.prototype.getToggledSortDirection=function(t){return"asc"===t.data("sortDirection")?"desc":"asc"},t.prototype.getUrl=function(t,n,o){var e=new URL(window.location.href),r=e.searchParams;return o?(r.set(o+"[orderBy]",t),r.set(o+"[sortOrder]",n)):(r.set("orderBy",t),r.set("sortOrder",n)),e.toString()},t}(),v=function(){function t(){}return t.prototype.extend=function(t){var n=t.getContainer().find("table.table");new y(n).attach()},t}();var b=window.$;const x=function(){function n(){}return n.prototype.extend=function(n){var o=this;n.getHeaderContainer().on("click",t,(function(t){o.handleSubmit(t,n)}))},n.prototype.handleSubmit=function(t,n){var o=b(t.currentTarget),e=o.data("confirm-message");if(!(void 0!==e&&e.length>0)||window.confirm(e)){var r=b("#"+n.getId()+"_filter_form");r.attr("action",o.data("url")),r.attr("method",o.data("method")),r.find(c(n.getId())).val(o.data("csrf")),r.submit()}},n}(),_=function(){function t(){}return t.prototype.extend=function(t){var n=t.getContainer().find(".column-filters");n.find(d).prop("disabled",!0),n.find("input:not(.js-bulk-action-select-all), select").on("input dp.change",(function(){n.find(d).prop("disabled",!1),n.find(".grid-reset-button").prop("hidden",!1)}))},t}();(0,window.$)((function(){var t=new s("logs");t.addExtension(new f),t.addExtension(new p),t.addExtension(new h),t.addExtension(new v),t.addExtension(new x),t.addExtension(new _)}))})(),window.logs=e,(0,window.$)((function(){window.prestashop.component.initComponents(["MultistoreConfigField"])})),window.shop_preferences={}})(); 
//# sourceMappingURL=data:application/json;charset=utf-8;base64,