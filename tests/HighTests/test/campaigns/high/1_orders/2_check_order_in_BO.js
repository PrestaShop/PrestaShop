scenario('Check order in BO', client => {
  test('should status be equal to Awaiting check payment', () => client.checkOrderStatus('Awaiting check payment'));
  test('should update order status to Refunded ', () => client.updateStatus('Payment error'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Refunded', () => client.checkOrderStatus('Payment error'));
  test('should update order status to Awaiting bank wire payment ', () => client.updateStatus('Awaiting bank wire payment'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Awaiting bank wire payment', () => client.checkOrderStatus('Awaiting bank wire payment'));
  test('should update order status to Payment accepted ', () => client.updateStatus('Payment accepted'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Payment accepted', () => client.checkOrderStatus('Payment accepted'));
  test('should check the shipping cost', () => client.checkShippingCost('â‚¬8.40'));
  test('should check order message', () => client.checkOrderMessage('Order message test'));
  test('should check payment type ', () => client.checkPayment('Payments by check'));
  test('should check the product information', () => client.checkProductInformation('White', 'Blouse', 'demo2', 'S'));
  test('should check quantity ', () => client.checkQuantity('4'));
  test('should check basic price ', () => client.checkBasicPrice());
  test('should check customer name ', () => client.checkCustomer('John DOE'));
  test('should update order status to Payment accepted ', () => client.updateStatus('Delivered'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Payment accepted', () => client.checkOrderStatus('Delivered'))
}, 'order_BO');
