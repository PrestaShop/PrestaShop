language: php

services:
  - mysql

addons:
  chrome: stable
  apt:
    packages:
      - dpkg
      - apache2
      - postfix
      - libapache2-mod-fastcgi
      - libappindicator1
      - fonts-liberation

cache:
  directories:
    - $HOME/.composer/cache

os: linux
dist: trusty

php:
  - 7.1
  - 7.2
  - 7.3

env:
  global:
    - SYMFONY_DEPRECATIONS_HELPER=disabled
    - DISABLE_DEBUG_TOOLBAR=1
  jobs:
    - PRESTASHOP_TEST_TYPE=unit
    - PRESTASHOP_TEST_TYPE=integration
    - PRESTASHOP_TEST_TYPE=sanity

stages:
  - name: deploy
    if: type = cron
  - name: test
    if: type IN (push, pull_request)

jobs:
  include:
    - stage: deploy
      php: 7.3
      before_install: skip
      before_script: skip
      install: skip
      script:
        - mkdir -p /tmp/ps-release
        - php tools/build/CreateRelease.php --destination-dir=/tmp/ps-release
        - cd /tmp/ps-release
          && today=`date +%Y-%m-%d-`; for i in *; do mv $i $today$TRAVIS_BRANCH-$i; done
          && cd -
      if: type = cron
      deploy:
        provider: gcs
        access_key_id: $GCS_ACCESS_KEY
        secret_access_key: $GCS_ACCESS_SECRET
        bucket: prestashop-core-nightly
        acl: public-read
        local_dir: "/tmp/ps-release"
        on:
          all_branches: true

before_install:
  - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_10.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :10 -ac -screen 0 1600x1200x16
  # Avoid Composer authentication issues
  - if [[ "$TRAVIS_REPO_SLUG" = PrestaShop/PrestaShop ]]; then cp travis-scripts/.composer-auth.json ~/.composer/auth.json; fi;
  # Apache & php-fpm configuration
  - bash travis-scripts/setup-php-fpm.sh
  - bash travis-scripts/setup-apache.sh

  # PrestaShop configuration
  - cp tests-legacy/parameters.yml.travis app/config/parameters.yml

install:
  - composer install --ansi --prefer-dist --no-interaction --no-progress --quiet;
  - if [ "$PRESTASHOP_TEST_TYPE" != "sanity" ]; then
      bash travis-scripts/install-prestashop;
    fi

script:
  - if [ "$PRESTASHOP_TEST_TYPE" = "unit" ]; then
        bash tests/check_file_syntax.sh;
        bash tests-legacy/check_phpunit.sh;
    fi

  - if [ "$PRESTASHOP_TEST_TYPE" = "unit" ]; then
        bash tests/check_unit.sh;
    fi

  - if [ "$PRESTASHOP_TEST_TYPE" = "integration" ]; then
        bash tests/check_integration.sh;
    fi

  - if [ "$PRESTASHOP_TEST_TYPE" = "sanity" ]; then
        bash tests/check_sanity.sh;
    fi

after_script:
  - sudo cat /var/log/apache2/error.log

after_failure:
  - curl -L http://localhost/
  - cat /etc/apache2/envvars
  - cat /etc/apache2/sites-available/000-default.conf
  - sudo cat /var/log/php-fpm.log
  - sudo ls -l /var/log/apache2
  - sudo cat /var/log/apache2/other_vhosts_access.log
  - cat $TRAVIS_BUILD_DIR/var/log/dev.log

before_deploy:
  - |
      if [ "${TRAVIS_EVENT_TYPE}" = "cron" ]; then
        mkdir -p ${HOME}/.ssh/;
        echo $GC_INSTANCE_KEY | base64 --decode -i > ${HOME}/.ssh/google_compute_engine && \
        echo $GC_INSTANCE_PUB | base64 --decode -i > ${HOME}/.ssh/google_compute_engine.pub && \
        chmod 600 ${HOME}/.ssh/* && \
        echo $GC_SERVICE_KEY | base64 --decode -i > ${HOME}/gcloud-service-key.json && \
        gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json && \
        gcloud config set project $GC_PROJECT_ID
      fi

after_deploy:
  - |
    if [ "${TRAVIS_EVENT_TYPE}" = "cron" ]; then
      [[ $TRAVIS_BRANCH = "develop" ]] && INSTANCE_TYPE="develop" || INSTANCE_TYPE="release";
      # make sure instance is stopped. This step does not need to be chained
      gcloud compute instances stop --zone $GC_ZONE "${GC_INSTANCE_NAME}-${INSTANCE_TYPE}";
      gcloud compute instances add-metadata "${GC_INSTANCE_NAME}-${INSTANCE_TYPE}" --zone $GC_ZONE --metadata=NIGHTLY_TOKEN=$NIGHTLY_TOKEN && \
      gcloud compute instances add-metadata "${GC_INSTANCE_NAME}-${INSTANCE_TYPE}" --zone $GC_ZONE --metadata=TRAVIS_BRANCH=$TRAVIS_BRANCH && \
      gcloud compute instances add-metadata "${GC_INSTANCE_NAME}-${INSTANCE_TYPE}" --zone $GC_ZONE --metadata-from-file startup-tests-script=tests/puppeteer/scripts/run-nightly-tests.sh && \
      gcloud compute instances add-metadata "${GC_INSTANCE_NAME}-${INSTANCE_TYPE}" --zone $GC_ZONE --metadata-from-file startup-reports-script=tests/puppeteer/scripts/run-nightly-reports.sh && \
      gcloud compute instances start --zone $GC_ZONE "${GC_INSTANCE_NAME}-${INSTANCE_TYPE}"
    fi
